import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from f1_data import (
    get_available_seasons,
    get_races,
    parse_race_classification,
    get_all_results_up_to_race,
)

import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

def parse_callback(data: str):
    """
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:
      - "season:2025"
      - "race:2025:3"
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (action, year, round) –∏–ª–∏ (None, None, None)
    """
    parts = data.split(":")
    if len(parts) == 2 and parts[0] == "season":
        try:
            y = int(parts[1])
            return ("season", y, None)
        except ValueError:
            return (None, None, None)
    if len(parts) == 3 and parts[0] == "race":
        try:
            y = int(parts[1])
            r = int(parts[2])
            return ("race", y, r)
        except ValueError:
            return (None, None, None)
    return (None, None, None)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äî –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞.
    """
    seasons = get_available_seasons()
    if not seasons:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    keyboard = []
    for y in seasons:
        btn = InlineKeyboardButton(str(y), callback_data=f"season:{y}")
        keyboard.append([btn])

    try:
        await update.message.reply_text(
            "üö• –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –§–æ—Ä–º—É–ª—ã-1:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest as e:
        logging.error(f"Failed to send seasons keyboard: {e}")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data.
    """
    query = update.callback_query
    await query.answer()

    action, year, round_number = parse_callback(query.data)
    if action == "season":
        await send_race_list(query, year)
    elif action == "race":
        await send_season_points(query, year, round_number)
    else:
        try:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        except BadRequest:
            pass


async def send_race_list(query, year: int):
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞: –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ **—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö** –ì—Ä–∞–Ω-–ø—Ä–∏.
    –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —ç—Ç–∞–ø, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É Race classification
    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ–Ω—â–∏–∫ —Å –æ—á–∫–∞–º–∏ > 0.
    """
    races = get_races(year)
    if not races:
        try:
            await query.edit_message_text(f"‚ö†Ô∏è –°–µ–∑–æ–Ω {year} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except BadRequest:
            pass
        return

    keyboard = []
    for race in races:
        rnd = race["round"]
        name = race["race_name"]
        date_str = race["date_str"]

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞:
        # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ —Å –æ—á–∫–∞–º–∏ > 0 ‚Üí —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≥–æ–Ω–∫–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
        # (–ª–∏–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â—ë –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã), –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë.
        # –î–ª—è –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
        pts_dict = parse_race_classification(race["link"])
        time.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –í–∏–∫–∏–ø–µ–¥–∏—é
        if not pts_dict:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ pts_dict —Ö–æ—Ç—å –æ–¥–Ω–æ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        has_points = any(pts > 0 for pts in pts_dict.values())
        if not has_points:
            continue

        btn_text = f"{rnd}. {name} ({date_str})"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"race:{year}:{rnd}")])

    if not keyboard:
        try:
            await query.edit_message_text(f"‚ÑπÔ∏è –î–ª—è —Å–µ–∑–æ–Ω–∞ {year} –µ—â—ë –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤.")
        except BadRequest:
            pass
        return

    try:
        await query.edit_message_text(
            f"üèÅ –°–µ–∑–æ–Ω {year}. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ì—Ä–∞–Ω-–ø—Ä–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "Message is not modified"
        if "Message is not modified" not in str(e):
            logging.error(f"Failed to edit message for race list: {e}")


async def send_season_points(query, year: int, round_number: int):
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ì—Ä–∞–Ω-–ø—Ä–∏: —Å—á–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—á–∫–∏.
    """
    totals = get_all_results_up_to_race(year, round_number)
    if not totals:
        try:
            await query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –¥–ª—è —Å–µ–∑–æ–Ω–∞ {year}, —ç—Ç–∞–ø {round_number}."
            )
        except BadRequest:
            pass
        return

    text = f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ –ø–æ—Å–ª–µ {round_number}-–≥–æ —ç—Ç–∞–ø–∞ —Å–µ–∑–æ–Ω–∞ {year}:\n\n"
    for i, (drv, pts) in enumerate(totals.items(), start=1):
        text += f"{i}. {drv}: {pts:.0f} –æ—á–∫–æ–≤\n"

    try:
        await query.edit_message_text(text)
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logging.error(f"Failed to edit message for season points: {e}")


if __name__ == "__main__":
    TOKEN = "7602772509:AAG3owYMcqESmoM6Os_VzWuv3CziYuFQKZg"
    if not TOKEN or TOKEN.startswith("INSERT"):
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
